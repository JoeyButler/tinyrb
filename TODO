TODOs (by priority)
===================
- object_id
- def self.yo; ...
- attr_accessor
- array splat (eg.: name, *args = name_args)
- Move some core classe method to ruby? Load before parsing
- Run parser through tinyrb
- Implement string interning (http://en.wikipedia.org/wiki/String_intern_pool)
- consts should be relative to current object (???)

Bootstrapping
=============
1) Builder parser and opcode emitter in Ruby
2) Pass parser and emitter through itself
3) inject opcode in vm and compile it

Stuff needed to bootstrap:
- Array, Hash, String
- Regexp (?)
- def
- Kernel.load

Stupid ideas
============
- Use preprocess macros to turn "class Someting < Base" in "Something.new(Base)"
- Use preprocess macros to turn "def method" in "define_method(:method) do"

