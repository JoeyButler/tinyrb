== Soon
[x] Implement String
[x] Implement Object
[x] Implement Class
[x] Implement Fixnum
[x] Make parser output AST
[x] Implement if, unless
[x] Implement simple method argument passing
[x] Implement while, until
[x] Include GC (Boehm)
[x] Monomorphic method cache (using CallSite)
[x] Implement basic method definition
[x] Implement GET/SETCONST
[x] Implement basic class definition
[x] Pass args to defined methods
[x] Bootstrap all class correctly (nil,true,false too)
[x] Fix CallSite error in recursive calls
[x] Allow reopening classes
[x] Implement Array
[x] Implement Hash
[x] Implement Module
[x] Implement yield
[ ] Implement IO and File
[ ] Implement some corelib stuff in Ruby (under /lib) and embed bytecode at compile time
[x] Implement splat operator
[ ] Implement Proc
[ ] Fix operator precedence, add () and unary -
[ ] Add support for escape chars in strings, (\n, \r, etc.)
*** See TODO in code too!

== Later
[ ] Implement exceptions
[ ] puts nil # => nil in MRI
[x] Inline some methods (+,<,>,==) as VM instructions, eg.: FIXNUM_ADD, STRING_CONCAT
[ ] Cache constant lookup
[ ] Fix Hash to use key.hash (see TODO in hash.c)
[ ] Implement metaclass
[ ] Implement super
[ ] Peephole optimization (Remove useless register allocations)
[ ] Compile to file
[ ] Implement case...when
[ ] Implement Float, Bignum
[ ] Run RubySpecs
[ ] Sandbox
[ ] Get it to build w/ -ansi gcc option (might need to get rid of khash.h)

== Oh Yeah That'll be Cool!
[ ] Rubygem support w/ http://github.com/fabien/minigems
[ ] Replace GC w/ smaller, simpler & embedable one (Io's maybe?)
[ ] REPL
[ ] Unicode
[ ] FFI
[ ] lightweight threads, coroutines (using libconcurrency?)
[ ] JIT
[ ] SIMD acceleration
