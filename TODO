@Next
[x] Range
[x] Allow {...} for blocks
[x] Implement metaclass
[x] def <object>.some_method
[ ] Array splat
[ ] upval in block
[ ] Implement IO
[ ] Implement File
[ ] Implement Dir
[ ] Implement Proc
[ ] require
[ ] begin...rescue
[ ] def...rescue
[ ] Fix operator precedence, add () and unary -
[ ] super(...)
[x] return w/ args
*** See TODO in code too!

@Later
[ ] Implement & operator
[ ] FFI or dl
[ ] Compile to file
[ ] Embed bytecode of /lib stuff inside executable
[ ] puts nil # => nil in MRI
[x] Inline some methods (+,<,>,==) as VM instructions, e.g.: FIXNUM_ADD, STRING_CONCAT
[ ] Cache constant lookup
[ ] Reimplement Array, Hash using Tuple like Rubinius
[ ] Peephole optimization (Remove useless register allocations)
[ ] Implement case...when
[ ] Implement Float, Bignum
[ ] Run RubySpecs
[ ] Sandbox
[ ] Get it to build w/ -ansi gcc option (might need to get rid of khash.h)

@Someday
[ ] Rubygem support w/ http://github.com/fabien/minigems
[ ] Replace GC w/ smaller, simpler & embeddable one (Io's maybe?)
[ ] REPL
[ ] Unicode
[ ] lightweight threads, coroutines (using libconcurrency?)
[ ] JIT
[ ] SIMD acceleration
