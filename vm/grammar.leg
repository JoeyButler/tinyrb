%{
#include <stdlib.h>    /* atoi() */
#include "tr.h"
#include "internal.h"

/*#define YY_DEBUG 1*/

#define YYSTYPE OBJ
#define yyvm    compiler->vm

static char *charbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

%}

Root      = s:Stmt EOF                      { compiler->node = NODE(ROOT, s) }
          | .
          { 
            VM = yyvm;
            tr_raise("SyntaxError at line %d, while parsing: `%s'\n", compiler->line, yybuf)
          }

Stmt      = (Comment SEP)?
            - stmt:Expr Comment?            { stmt = NODES(stmt) }
            ( SEP - exp:Expr Comment?       { PUSH_NODE(stmt, exp) }
            | SEP - Comment
            )* SEP?                         { $$ = stmt }

Expr      = Assign
          | OpCall
          | Call
          | Value
          | While
          | Until
          | '(' Expr ')'

Comment   = - '#' [^\n]*                    # HACK (!EOL)* cause a hang

Call      =                                 { rcv = 0 }
            ( rcv:Value '.'
            )? ( rmsg:Message '.'           { rcv = NODE2(SEND, rcv, rmsg) }
               )* msg:Message               { $$ = NODE2(SEND, rcv, msg) }

OpCall    =                                 { rcv = 0 }
            ( rcv:Call
            | rcv:Value
            ) - op:OP - arg:Expr            { $$ = NODE2(SEND, rcv, NODE2(MSG, op, NODES(arg))) }

Message   = name:ID                         { args = 0 }
                    ( '(' args:Args? ')'
                    | SPACE args:Args       
                    )?                      { $$ = NODE2(MSG, name, args) }

Arg       = - Expr -

Args      = args:Arg                        { args = NODES(args) }
            ( ',' arg:Arg                   { PUSH_NODE(args, arg) }
            )*                              { $$ = args }

Assign    = name:ID - '=' - val:Expr        { $$ = NODE2(ASSIGN, name, val) }

While     = 'while' - cond:Expr SEP
              body:Stmt -
            'end'                           { $$ = NODE2(WHILE, cond, body) }

Until     = 'until' - cond:Expr SEP
              body:Stmt -
            'end'                           { $$ = NODE2(UNTIL, cond, body) }

Value     = v:NUMBER                        { $$ = NODE(VALUE, v) }
          | v:SYMBOL                        { $$ = NODE(VALUE, v) }
          | v:STRING1                       { $$ = NODE(STRING, v) }
          | v:STRING2                       { $$ = NODE(STRING, v) }

KEYWORD   = 'while' | 'until' | 'end'
ID        = !KEYWORD
            < [a-z_] [a-zA-Z0-9_]* >        { $$ = TrSymbol_new(yyvm, yytext) }
OP        = < ('+' | '-' | '*' | '/' | '%' | '**' |
               '<' | '>' | '<=' | '>=' | '=='
              ) >                           { $$ = TrSymbol_new(yyvm, yytext) }
NUMBER    = < '-'? [0-9]+ >                 { $$ = TrFixnum_new(yyvm, atoi(yytext)) }
SYMBOL    = ':' ID
STRING2   = '"' < [^\"]* > '"'              { $$ = TrString_new2(yyvm, yytext) }
STRING1   = '\'' < [^\']* > '\''            { $$ = TrString_new2(yyvm, yytext) }

-         = [ \t]*
SPACE     = [ ]+
EOL       = '\n' | '\r\n' | '\r'            { compiler->line++; }
EOF       = !.
SEP       = - (EOL | ';')+

%%

TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);

  while (yyparse());

  TrCompiler_compile(compiler);
  
  TrBlock *b = compiler->block;
  charbuf = 0;
  compiler = 0;
  
  return b;
}
