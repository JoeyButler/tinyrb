%{
#include <stdlib.h>    /* atoi() */
#include "tr.h"
#include "internal.h"

#ifdef __DEBUG__
#define YY_DEBUG 1
#endif

#define YYSTYPE OBJ
#define yyvm    compiler->vm

static char *charbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

%}

Stmt    = - exp:Expr SEP*                 { PUSH_NODE(compiler->stms, exp) }
        | ( !SEP . )* SEP                 { VM = yyvm; tr_raise("SyntaxError\n") }

Expr    = Value
        | Call

Call    = m:Message                       { $$ = NODE2(SEND, 0, m) }

Message = m:ID ('(' args:Args? ')'
               | SPACE args:Args
               )?                         { $$ = NODE2(MSG, m, args) }

Arg     = - v:Expr -

Args    = args:Arg                        { args = NODES(args) }
          (',' x:Arg                      { PUSH_NODE(args, x) }
          )*                              { $$ = args }

Value   = v:NUMBER                        { $$ = NODE(VALUE, v) }
        | v:SYMBOL                        { $$ = NODE(VALUE, v) }
        | v:STRING1                       { $$ = NODE(STRING, v) }
        | v:STRING2                       { $$ = NODE(STRING, v) }

ID      = < [a-z]+ >                      { $$ = TrSymbol_new(yyvm, yytext) }
NUMBER  = < [0-9]+ >                      { $$ = TrFixnum_new(yyvm, atoi(yytext)) }
SYMBOL  = ':' ID
STRING2 = '"' < [^\"]* > '"'              { $$ = TrString_new2(yyvm, yytext) }
STRING1 = '\'' < [^\']* > '\''            { $$ = TrString_new2(yyvm, yytext) }

-       = [ \t]*
SPACE   = [ ]+
SEP     = - ('\n' | '\r\n' | '\r' | ';')  { compiler->line++; }

%%

TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);
  compiler->stms = NODES_N(0);
  compiler->node = NODE(ROOT, compiler->stms);

  while (yyparse());

  TrCompiler_compile(compiler);
  
  TrBlock *b = compiler->block;
  charbuf = 0;
  compiler = 0;
  
  return b;
}
