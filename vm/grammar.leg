%{
#include <stdlib.h>
#include "tr.h"
#include "internal.h"

/*#define YY_DEBUG 1*/

#define YYSTYPE   OBJ
#define YYMALLOC  TR_MALLOC
#define YYREALLOC TR_REALLOC
#define yyvm      compiler->vm

static char *charbuf;
static OBJ sbuf;
static size_t nbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

#define STRING_START sbuf = TrString_new3(yyvm, 4096); nbuf = 0
#define STRING_PUSH(P,L) \
  VM = yyvm; \
  TR_MEMCPY_N(TR_STR_PTR(sbuf) + nbuf, (P), char, (L)); \
  nbuf += (L)

%}

Root      = s:Stmts EOF                     { compiler->node = NODE(ROOT, s) }
          | .
          { 
            VM = yyvm;
            tr_raise("SyntaxError at line %d, while parsing: `%s'\n", compiler->line, yybuf)
          }

Stmts     = (Comment SEP)*
            - head:Stmt Comment?            { head = NODES(head) }
            ( SEP - tail:Stmt Comment?      { PUSH_NODE(head, tail) }
            | SEP - Comment
            )* SEP?                         { $$ = head }
          | (Comment SEP)+                  { $$ = NODES_N(0) }

OptStmts  = Stmts
          | - SEP?                          { $$ = NODES_N(0) }

Stmt      = While
          | Until
          | If
          | Unless
          | Def
          | Class
          | Module
          | Expr

Expr      = Assign
          | AsgnCall
          | OpCall
          | SpecCall
          | Call
          | Range
          | Yield
          | Value

Comment   = - '#' [^\n]*                    # HACK (!EOL)* cause a hang wth?

Call      =                                 { block = rcv = 0 }
            ( rcv:Value '.'
            )? ( rmsg:Message '.'           { rcv = NODE2(SEND, rcv, rmsg) }
               )* msg:Message
                  - block:Block?            { $$ = NODE3(SEND, rcv, msg, block) }

# TODO refactor head part w/ Call maybe eh?
AsgnCall   =                                { rcv = 0 }
            ( rcv:Value '.'
            )? ( rmsg:Message '.'           { rcv = NODE2(SEND, rcv, rmsg) }
               )* msg:ID - asg:ASSIGN
                  - val:Stmt                { VM = yyvm; $$ = NODE2(SEND, rcv, NODE2(MSG, SYMCAT(msg, asg), NODES(val))) }

Receiver  = (                               { rcv = 0 }
              rcv:Call
            | rcv:Value
            )                               { $$ = rcv }

SpecCall  = rcv:Receiver '[' args:Args ']'  
            - ASSIGN - val:Stmt             { PUSH_NODE(args, val); $$ = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]="), args)) }
          | rcv:Receiver '[' args:Args ']'  { $$ = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]"), args)) }

OpCall    = (rcv:SpecCall | rcv:Receiver)
            - op:OP - arg:Expr              { $$ = NODE2(SEND, rcv, NODE2(MSG, op, NODES(arg))) }

Message   = name:ID                         { args = 0 }
              ( '(' args:Args? ')'
              | SPACE args:Args
              )?                            { $$ = NODE2(MSG, name, args) }

Arg       = - Expr -

Args      = args:Arg                        { args = NODES(args) }
            ( ',' arg:Arg                   { PUSH_NODE(args, arg) }
            )*                              { $$ = args }

Block     = 'do' SEP
              - body:OptStmts -
            'end'                           { $$ = NODE(BLOCK, body) }
          | 'do' - '|' params:Params '|' SEP
              - body:OptStmts -
            'end'                           { $$ = NODE2(BLOCK, body, params) }
          | '{' - body:OptStmts - '}'       { $$ = NODE(BLOCK, body) }
          | '{' - '|' params:Params '|'
            - body:OptStmts - '}'           { $$ = NODE2(BLOCK, body, params) }

Assign    = name:ID - ASSIGN - val:Stmt     { $$ = NODE2(ASSIGN, name, val) }
          | name:CONST - ASSIGN - val:Stmt  { $$ = NODE2(SETCONST, name, val) }
          | name:IVAR - ASSIGN - val:Stmt   { $$ = NODE2(SETIVAR, name, val) }
          | name:CVAR - ASSIGN - val:Stmt   { $$ = NODE2(SETCVAR, name, val) }
          | name:GLOBAL - ASSIGN - val:Stmt { $$ = NODE2(SETGLOBAL, name, val) }

While     = 'while' SPACE cond:Expr SEP
              body:Stmts -
            'end'                           { $$ = NODE2(WHILE, cond, body) }

Until     = 'until' SPACE cond:Expr SEP
              body:Stmts -
            'end'                           { $$ = NODE2(UNTIL, cond, body) }

If        = 'if' SPACE cond:Expr SEP            { else_body = 0 }
              body:Stmts -
            else_body:Else?
            'end'                           { $$ = NODE3(IF, cond, body, else_body) }
          | body:Expr - 'if' - cond:Expr    { $$ = NODE2(IF, cond, NODES(body)) }

Unless    = 'unless' SPACE cond:Expr SEP    { else_body = 0 }
              body:Stmts -
            else_body:Else?
            'end'                           { $$ = NODE3(UNLESS, cond, body, else_body) }
          | body:Expr -
              'unless' - cond:Expr          { $$ = NODE2(UNLESS, cond, NODES(body)) }

Else      = 'else' SEP - body:Stmts -       { $$ = body }

Def       = 'def' SPACE name:ID             { params = 0 }
            (- '(' params:Params? ')')? SEP
              body:OptStmts -
            'end'                           { $$ = NODE3(DEF, name, params ? params : NODES_N(0), body) }

Params    = head:Param                      { head = NODES(head) }
            ( ',' tail:Param                { PUSH_NODE(head, tail) }
            )*                              { $$ = head }

Param     = - name:ID -                     { $$ = NODE(PARAM, name) }
          | - '*' name:ID -                 { $$ = NODE2(PARAM, name, 1) }

Class     = 'class' SPACE name:CONST        { super = 0 }
            (- '<' - super:CONST)? SEP
              body:OptStmts -
            'end'                           { $$ = NODE3(CLASS, name, super, body) }

Module    = 'module' SPACE name:CONST SEP
              body:OptStmts -
            'end'                           { $$ = NODE3(MODULE, name, 0, body) }

Range     = s:Receiver - '..' - e:Expr      { $$ = NODE3(RANGE, s, e, 0) }
          | s:Receiver - '...' - e:Expr     { $$ = NODE3(RANGE, s, e, 1) }

Yield     = 'yield' SPACE args:Args         { $$ = NODE(YIELD, args) }
          | 'yield' '(' args:Args ')'       { $$ = NODE(YIELD, args) }
          | 'yield'                         { $$ = NODE(YIELD, NODES_N(0)) }

Value     = v:NUMBER                        { $$ = NODE(VALUE, v) }
          | v:SYMBOL                        { $$ = NODE(VALUE, v) }
          | v:STRING1                       { $$ = NODE(STRING, v) }
          | v:STRING2                       { $$ = NODE(STRING, v) }
          | v:CONST                         { $$ = NODE(CONST, v) }
          | 'nil'                           { $$ = NODE(NIL, 0) }
          | 'true'                          { $$ = NODE(BOOL, 1) }
          | 'false'                         { $$ = NODE(BOOL, 0) }
          | 'self'                          { $$ = NODE(SELF, 0) }
          | name:IVAR                       { $$ = NODE(GETIVAR, name) }
          | name:CVAR                       { $$ = NODE(GETCVAR, name) }
          | name:GLOBAL                     { $$ = NODE(GETGLOBAL, name) } # TODO
          | '[' - ']'                       { $$ = NODE(ARRAY, NODES_N(0)) }
          | '[' - items:Args - ']'          { $$ = NODE(ARRAY, items) }
          | '{' - '}'                       { $$ = NODE(HASH, NODES_N(0)) }
          | '{' - items:HashItems - '}'     { $$ = NODE(HASH, items) }
          | '(' - Expr - ')'

HashItems = head:Expr - '=>' - val:Expr     { head = NODES_N(2, head, val) }
            ( - ',' - key:Expr -            { PUSH_NODE(head, key) }
                '=>' - val:Expr             { PUSH_NODE(head, val) }
            )                               { $$ = head }

KEYWORD   = 'while' | 'until' | 'do' | 'end' |
            'if' | 'unless' | 'else' |
            'true' | 'false' | 'nil' | 'self' |
            'class' | 'module' | 'def' | 'yield'

NAME      = [a-zA-Z0-9_]+
ID        = !'self'                         # self is special, can never be a method name
            < KEYWORD > &('.' | '(' | '[')  { $$ = TrSymbol_new(yyvm, yytext) } # hm, there's probably a better way
          | < KEYWORD NAME >                { $$ = TrSymbol_new(yyvm, yytext) }
          | !KEYWORD
            < [a-z_] NAME?
              ( '=' | '!'| '?' )? >         { $$ = TrSymbol_new(yyvm, yytext) }
CONST     = < [A-Z] NAME? >                 { $$ = TrSymbol_new(yyvm, yytext) }
OP        = < ( '&&' | '||' |
                '**' | '^'  | '&'  | '|'  | '~' |
                '+'  | '-'  | '*'  | '/'  | '%' | '<=>' |
                '<<' | '>>' | '==' | '=~' | '===' |
                '<'  | '>'  | '<=' | '>='
              ) >                           { $$ = TrSymbol_new(yyvm, yytext) }
ASSIGN    = < '=' > &(!'=')                 { $$ = TrSymbol_new(yyvm, yytext) }
IVAR      = < '@' NAME >                    { $$ = TrSymbol_new(yyvm, yytext) }
CVAR      = < '@@' NAME >                   { $$ = TrSymbol_new(yyvm, yytext) }
GLOBAL    = < '$' NAME >                    { $$ = TrSymbol_new(yyvm, yytext) }
NUMBER    = < '-'? [0-9]+ >                 { $$ = TrFixnum_new(yyvm, atoi(yytext)) }
SYMBOL    = ':' < (NAME | KEYWORD) >        { $$ = TrSymbol_new(yyvm, yytext) }

STRING1   = '\''                            { STRING_START }
            (
              '\\\''                        { STRING_PUSH("'", 1) }
            | < [^\'] >                     { STRING_PUSH(yytext, yyleng) }
            )* '\''                         { $$ = sbuf }

STRING2   = '"'                             { STRING_START }
            (
              '\\n'                         { STRING_PUSH("\n", 1) }
            | '\\b'                         { STRING_PUSH("\b", 1) }
            | '\\f'                         { STRING_PUSH("\f", 1) }
            | '\\r'                         { STRING_PUSH("\r", 1) }
            | '\\t'                         { STRING_PUSH("\t", 1) }
            | '\\\"'                        { STRING_PUSH("\"", 1) }
            | '\\\\'                        { STRING_PUSH("\\", 1) }
            | < [^\"] >                     { STRING_PUSH(yytext, yyleng) }
            )* '"'                          { $$ = sbuf }

-         = [ \t]*
SPACE     = [ ]+
EOL       = ( '\n' | '\r\n' | '\r' )        { compiler->line++ }
EOF       = !.
SEP       = ( - (EOL | ';') )+

%%

TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);

  while (yyparse());

  TrCompiler_compile(compiler);
  
  TrBlock *b = compiler->block;
  charbuf = 0;
  compiler = 0;
  
  return b;
}
