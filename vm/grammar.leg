%{
#include <stdlib.h>    /* atoi() */
#include "tr.h"
#include "internal.h"

/*#define YY_DEBUG 1*/

#define YYSTYPE OBJ
#define yyvm    compiler->vm

static char *charbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

%}

Root      = s:Stmts EOF                     { compiler->node = NODE(ROOT, s) }
          | .
          { 
            VM = yyvm;
            tr_raise("SyntaxError at line %d, while parsing: `%s'\n", compiler->line, yybuf)
          }

Stmts     = (Comment SEP)?
            - head:Stmt Comment?            { head = NODES(head) }
            ( SEP - tail:Stmt Comment?      { PUSH_NODE(head, tail) }
            | SEP - Comment
            )* SEP?                         { $$ = head }

Stmt      = While
          | Until
          | If
          | Unless
          | Def
          | Class
          | Module
          | Expr
          | '(' Stmt ')'

Expr      = Assign
          | AsgnCall
          | OpCall
          | SpecCall
          | Call
          | Value

Comment   = - '#' [^\n]*                    # HACK (!EOL)* cause a hang

Call      =                                 { rcv = 0 }
            ( rcv:Value '.'
            )? ( rmsg:Message '.'           { rcv = NODE2(SEND, rcv, rmsg) }
               )* msg:Message               { $$ = NODE2(SEND, rcv, msg) }

Receiver  = (                               { rcv = 0 }
              rcv:Call
            | rcv:Value
            )                               { $$ = rcv }

SpecCall  = rcv:Receiver '[' args:Args ']'  
            - ASSIGN - val:Stmt             { PUSH_NODE(args, val); $$ = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]="), args)) }
          | rcv:Receiver '[' args:Args ']'  { $$ = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]"), args)) }

# TODO
AsgnCall  = rcv:Receiver '.' msg:ID -
              asg:ASSIGN - val:Stmt         { VM = yyvm; $$ = NODE2(SEND, rcv, NODE2(MSG, SYMCAT(msg, asg), NODES(val))) }

OpCall    = (rcv:SpecCall | rcv:Receiver)
            - op:OP - arg:Expr              { $$ = NODE2(SEND, rcv, NODE2(MSG, op, NODES(arg))) }

Message   = name:ID                         { args = 0 }
                    ( '(' args:Args? ')'
                    | SPACE args:Args       
                    )?                      { $$ = NODE2(MSG, name, args) }

Arg       = - Expr -

Args      = args:Arg                        { args = NODES(args) }
            ( ',' arg:Arg                   { PUSH_NODE(args, arg) }
            )*                              { $$ = args }

Assign    = name:ID - ASSIGN - val:Stmt     { $$ = NODE2(ASSIGN, name, val) }
          | name:CONST - ASSIGN - val:Stmt  { $$ = NODE2(SETCONST, name, val) }
          | name:IVAR - ASSIGN - val:Stmt   { $$ = NODE2(SETIVAR, name, val) }
          | name:CVAR - ASSIGN - val:Stmt   { $$ = NODE2(SETCVAR, name, val) }
          | name:GLOBAL - ASSIGN - val:Stmt { $$ = NODE2(SETGLOBAL, name, val) }

While     = 'while' SPACE cond:Expr SEP
              body:Stmts -
            'end'                           { $$ = NODE2(WHILE, cond, body) }

Until     = 'until' SPACE cond:Expr SEP
              body:Stmts -
            'end'                           { $$ = NODE2(UNTIL, cond, body) }

If        = 'if' SPACE cond:Expr SEP            { else_body = 0 }
              body:Stmts -
            else_body:Else?
            'end'                           { $$ = NODE3(IF, cond, body, else_body) }
          | body:Expr - 'if' - cond:Expr    { $$ = NODE2(IF, cond, NODES(body)) }

Unless    = 'unless' SPACE cond:Expr SEP    { else_body = 0 }
              body:Stmts -
            else_body:Else?
            'end'                           { $$ = NODE3(UNLESS, cond, body, else_body) }
          | body:Expr -
              'unless' - cond:Expr          { $$ = NODE2(UNLESS, cond, NODES(body)) }

Else      = 'else' SEP - body:Stmts -       { $$ = body }

Def       = 'def' SPACE name:ID             { params = 0 }
            (- '(' params:Params? ')')? SEP
              body:Stmts -
            'end'                           { $$ = NODE3(DEF, name, params ? params : NODES_N(0), body) }

Params    = head:Param                      { head = NODES(head) }
            ( ',' tail:Param                { PUSH_NODE(head, tail) }
            )*                              { $$ = head }

Param     = - name:ID -                     { $$ = NODE(PARAM, name) }
          | - '*' name:ID -                 { $$ = NODE2(PARAM, name, 1) }

Class     = 'class' SPACE name:CONST        { super = 0 }
            (- '<' - super:CONST)? SEP
              body:Stmts -
            'end'                           { $$ = NODE3(CLASS, name, super, body) }

Module    = 'module' SPACE name:CONST SEP
              body:Stmts -
            'end'                           { $$ = NODE3(MODULE, name, 0, body) }

Value     = v:NUMBER                        { $$ = NODE(VALUE, v) }
          | v:SYMBOL                        { $$ = NODE(VALUE, v) }
          | v:STRING1                       { $$ = NODE(STRING, v) }
          | v:STRING2                       { $$ = NODE(STRING, v) }
          | v:CONST                         { $$ = NODE(CONST, v) }
          | 'nil'                           { $$ = NODE(NIL, 0) }
          | 'true'                          { $$ = NODE(BOOL, 1) }
          | 'false'                         { $$ = NODE(BOOL, 0) }
          | 'self'                          { $$ = NODE(SELF, 0) }
          | name:IVAR                       { $$ = NODE(GETIVAR, name) }
          | name:CVAR                       { $$ = NODE(GETCVAR, name) }
          | name:GLOBAL                     { $$ = NODE(GETGLOBAL, name) }
          | '[]'                            { $$ = NODE(ARRAY, NODES_N(0)) }
          | '[' items:Args ']'              { $$ = NODE(ARRAY, items) }
          | '(' Expr ')'

KEYWORD   = < ( 'while' | 'until' | 'do' | 'end' |
                'if' | 'unless' | 'else' |
                'true' | 'false' | 'nil' | 'self' |
                'class' | 'module' | 'def'
              ) >                           { $$ = TrSymbol_new(yyvm, yytext) }
ID        = kw:KEYWORD &('.' | '(' | '[')   { $$ = kw } # hm, there's probably a better way
          | !KEYWORD
            < [a-z_] [a-zA-Z0-9_]*
              ( '=' | '!'| '?' )? >         { $$ = TrSymbol_new(yyvm, yytext) }
CONST     = < [A-Z] [a-zA-Z0-9_]* >         { $$ = TrSymbol_new(yyvm, yytext) }
OP        = < ( '+' | '-' | '*' | '/' | '%' | '**' |
                '==' | '===' | '<<' | '>>' |
                '<' | '>' | '<=' | '>='
              ) >                           { $$ = TrSymbol_new(yyvm, yytext) }
ASSIGN    = < '=' > &(!'=')                 { $$ = TrSymbol_new(yyvm, yytext) }
IVAR      = < '@' ID >                      { $$ = TrSymbol_new(yyvm, yytext) }
CVAR      = < '@@' ID >                     { $$ = TrSymbol_new(yyvm, yytext) }
GLOBAL    = < '$' ID >                      { $$ = TrSymbol_new(yyvm, yytext) }
NUMBER    = < '-'? [0-9]+ >                 { $$ = TrFixnum_new(yyvm, atoi(yytext)) }
SYMBOL    = ':' (ID | KEYWORD)
STRING1   = '\'' < [^\']* > '\''            { $$ = TrString_new2(yyvm, yytext) }
STRING2   = '"' < [^\"]* > '"'              { $$ = TrString_new2(yyvm, yytext) }

-         = [ \t]*
SPACE     = [ ]+
EOL       = '\n' | '\r\n' | '\r'            { compiler->line++; }
EOF       = !.
SEP       = - (EOL | ';')+

%%

TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);

  while (yyparse());

  TrCompiler_compile(compiler);
  
  TrBlock *b = compiler->block;
  charbuf = 0;
  compiler = 0;
  
  return b;
}
